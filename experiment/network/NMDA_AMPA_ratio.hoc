strdef STDOUT, PPRINT_CMD,EXEC_CMD, PATH, STRING, EXPSTR, NOJUMPSTR
PATH = "/home/cluster/stefanos/Documents/GitHub/prefrontal-micro/experiment/network/"
if(!load_file("/home/cluster/stefanos/Libraries/nrn/share/nrn/lib/hoc/nrngui.hoc")){print "ERROR	Failed to load NEURON!"}			//load main NEURON library
//{load_file("/home/cluster/stefanos/Libraries/nrn/share/nrn/lib/hoc/stdrun.hoc")}
objref PC
PC = new ParallelContext()
PARALLEL  = 0

tstop = 700 
//{xopen("./DATA/vstim.hoc")}
steps_per_ms=10
dt=1/steps_per_ms
n=int(tstop/dt)
celsius=34
DEND_NSEG = 5
objref v_msec
v_msec = new Vector(n)
for q=0,n-1 {v_msec.x[q]=q*dt }

nPCcells = 1

v_init = -66 
objref cv
cv=new CVode(0)
if(cv.active(0)){print "ERRORRRR!"}	     //Do NOT use CVODE solver!
if(!cv.use_long_double(1)){print "ERRORRRR!"}//was cvode
if(!cv.cache_efficient(1)){print "ERRORRRR!"}

{xopen("pfc_pc_noNa.hoc")}

//Balance each cell compartment to the prefered voltage and comply with NEURON initialization routines.
proc balance_compartments() {
	//Do not call finitialize with v_init argument, because it sets it in all cells
	// created up to this point!
	finitialize()
	fcurrent()
	forsec PCcell_list {
		//print "In PCcell_list"
		for (x) {
			//print "V is: ",v
			if (ismembrane("na_ion")) {e_passive(x)=v(x)+ina(x)/g_passive(x)} 
			if (ismembrane("k_ion")) {e_passive(x)=e_passive(x)+ik(x)/g_passive(x)} 
			if (ismembrane("ca_ion")) {e_passive(x)=e_passive(x)+ica(x)/g_passive(x)}
			if (ismembrane("h")) {e_passive(x)=e_passive(x)+ihi(x)/g_passive(x)}
		}
	}
	fcurrent()
	/*if (cv.active()) {
		cv.re_init()
	}       else {
		fcurrent()
	}*/
	frecord_init()
}


//-------------------Set synaptic weights
ampaweight=	0.00019		//0.00019//According to Wang(2008)
nmdaweight = 0.25//0.05

taur_cad = 50//36 //SSS

objref r, PCv,PCdv,PCi, vsoma, PCvi, PCiampa
objref PCvd, PCvdd, PCvddd

synapses = SYN_NO//5 

objref NS[synapses]
NSnoise = 0.0//0.9

r = new Random(0)
r.normal(0, 0.3)

objref rl
rl = new Random()
rl.uniform(0,1)

objref ampapr[synapses], nmdapr[synapses], nc1[synapses], nc2[synapses]
objref gabaa[4], gabab[4], ncga[4], ncgb[4]

nmdabias = 10 //TEMP CHANGE! REVERT BACK TO 2!!
ampabias = 90//1
gababfactor = 8
gabaweight = 0.00083//XENIA GABAa //6.9e-4 			//According to Woo(2007)
gabaweightb = 1.05e-4
gabaweight_pv2pc_a = gabaweight    //3.8// GABA gia to RAND connectivity //OVERRIDED!!
gabaweight_pv2pc_b = gabaweightb   * gababfactor 

objref nil

NS=new NetStim()
NS.interval=10//ISI//isir.repick()
NS.number=2//20
NS.start=50
NS.noise=NSnoise

objref locations_vect
locations_vect = new Vector()
locations_vect.append(0.05)
locations_vect.append(0.25)
locations_vect.append(0.45)
locations_vect.append(0.65)
locations_vect.append(0.85)

balance_compartments()

proc calcium_block() {
	PCcell_list{
		for(x) {
		if(ismembrane("can")) for(x) {  gcabar_can(x)= gcabar_can(x)*0 }
		if(ismembrane("cat")) for(x) {  gcatbar_cat(x)= gcatbar_cat(x)*0 }			
		if(ismembrane("cal")) for(x) {  gcalbar_cal(x)= gcalbar_cal(x)*0 }
		if(ismembrane("car")) for(x) {  gcabar_car(x)= gcabar_car(x)*0 }
}}}
proc validateNMDA () {
        PCcell_list{
                for(x) {
                if(ismembrane("Naf")) for(x) {  gnafbar_Naf(x)= gnafbar_Naf(x)*0 }
                if(ismembrane("nap")) for(x) {  gnabar_nap(x)= gnabar_nap(x)*0 }
                if(ismembrane("kdr")) for(x) {  gkdrbar_kdr(x)= gkdrbar_kdr(x)*0 }
                if(ismembrane("IKs")) for(x) {  gKsbar_IKs(x)= gKsbar_IKs(x)*0 }
                if(ismembrane("kad")) for(x) { gkabar_kad(x)= gkabar_kad(x)*0 }
                if(ismembrane("kca")) for(x) {  gbar_kca(x)= gbar_kca(x)*0}
                if(ismembrane("iC"))  for(x) {  gkcbar_iC(x)= gkcbar_iC(x)*0}
}}}


//objref myvclamp
//PCcells.o(0).soma myvclamp = new VClamp(0.5)
//myvclamp.dur[0] = tstop
//calcium_block()
validateNMDA()

for experiment_conf = 0,0{
	if(EXPAMPA){
		//myvclamp.amp[0] = -70
		EXPSTR = "AMPAb"
	}else{
		//myvclamp.amp[0] = 60
		EXPSTR = "NMDA"
	}

	for location = 0, locations_vect.size()-1{
				print "---------------------"
				PID=locations_vect.x[location]

				for syn=0,synapses-1{
					nmdapr[syn] = nil
					ampapr[syn] = nil
					nc1[syn] = nil
					nc2[syn] = nil
				}
				for syn=0,synapses-1{
					print " Placing synapse : ",syn, " in loc ",PID

					//if (EXPAMPA) {
						PCcells.o(0).dend[0] ampapr[syn] = new GLU(PID)
						nc1[syn]=new NetCon(NS, ampapr[syn])
						nc1[syn].delay=1
						nc1[syn].weight=ampaweight * 0.5 * ampabias//SSS
					//}else{
					if(!EXPAMPA){
						PCcells.o(0).dend[0] nmdapr[syn] = new nmda_segev(PID)
						nc2[syn]=new NetCon(NS, nmdapr[syn])
						nc2[syn].delay=1
						nc2[syn].weight= 0.25 * 0.5* nmdabias //4.2 
					}
					
				}


				PCv = new Vector(n,0)
				PCv.record(&PCcells.o(0).soma.v(0.5),v_msec,0) 
				PCvi = new Vector(n,0)
				//PCvi.record(&myvclamp.i,v_msec,0) 
				//PCvi.record(&nmdapr[0].inmda,v_msec,0) 


				run()
	print "RUN FINISHED"
/*
				vsoma = new File()		
				sprint(STRING,"DATA/vclamp/ivclamp_%s_%d.txt",EXPSTR,location)
				print STRING
				vsoma.wopen(STRING)
				for j=0, PCvi.size()-1 {
					vsoma.printf ("%f\n",PCvi.x[j])
				}
				vsoma.close()
*/
				vsoma = new File()		
				sprint(STRING,"DATA/vclamp/vsoma_figure_%d_%s_%d.txt",synapses, EXPSTR,location)
				print STRING
				vsoma.wopen(STRING)
				for j=0, PCv.size()-1 {
					vsoma.printf ("%f\n",PCv.x[j])
				}
				vsoma.close()



	print "Vsoma saved"

	} //For different dend locations
} //for experiment configuration (NMDA/AMPA)

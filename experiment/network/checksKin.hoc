//--------------Set parameters and run this for the net (4 Pcells and 1 Interneuron)
//--------------Written 8-5-08, modified 08-10-08
if(!load_file("nrngui.hoc")){print "ERROR	Failed to load NEURON!"}			//load main NEURON library
//----------------------------------------Set parameters--------------------------------------------------------------//
if(!xopen("main_parameters.hoc")){print "ERROR	Failed to load main parameters!"}   
//override parameters for this validation runs:
nPCcells=1
tstop=100 //was 800 for NMDA/AMPA
n=int(tstop/dt) 
GPYID = 3  

if(!xopen("../../lib/basic-graphics.hoc")){print "ERROR	Failed to import parameters!"}
if(!xopen("../define_objects.hoc")){print "ERROR	Failed to import parameters!"}

//--------------------------------------Graphs
//addgraph_2("PCcells.o(0).soma.v(0.5)", 0,tstop, -70, 50)
////////////////////////////////////////////
////////////////////////////////////////////

NMDAfactor = 1//0.59
AMPAfactor = 1
xopen("NMDA_Array_1_5.hoc")
xopen("AMPA_Array_1_5.hoc")		
xopen ("network.hoc")                    	//load net structure


//---------------------------------------------Multiple Experiments/Runs---------------------------------------------//

// fADP:
proc sadp_soma() { local ctr
	print "blah begin"
	ctr=1
	forsec soma_list{ //soma_list
		print "blah iterate soma_list"
		for(x) {
			if(ismembrane("ican")) for(x) { gbar_ican(x)= gbar_ican(x)*fadp}  //i Nassi exei pio poly ican !
			printf("for segment%d x is %f\n",ctr,x)
		}
		ctr=ctr+1
}}
proc sadp_dend() {
	forsec dend_list{
		for(x) {
			if(ismembrane("ican")) for(x) { gbar_ican(x)= gbar_ican(x)*fadp} 
		}}}
		
proc sadp_apical() {
forsec apical_list {
for(x) {

	if(ismembrane("ican"))  for(x) { gbar_ican(x)= gbar_ican(x)*fadp} 
	}}}



// train for fADP validation:
objref ic2[5]

proc train() {
initDelay = 1000
for i=0,4 {
		PCcells.o(0).soma ic2[i]=new IClamp(0.5)
		ic2[i].del=initDelay	
		ic2[i].dur=5
		ic2[i].amp=3//(nA)
		initDelay = initDelay + 50
}}



	
//--------------------------------------------------------------IClamp
objref ic10
proc IClump() {
amp=0.17//IC_AMP//0.15//0.27//0.120//0.25//0.3//(nA)
PCcells.o(0).soma {ic10=new IClamp(0.5)}
ic10.del=400
ic10.dur=70000//2000
ic10.amp=amp

}

//--------------------------------------------------------------VClamp
objref vc
proc vclamp() {
PCcells.o(0).soma {vc = new VClamp(0.5)}
vc.amp[0]= -60 //NMDA 60//AMPA -70//train -65
vc.dur[0]=500
vc.amp[1]= 20 //NMDA 60//AMPA -70//train -65
vc.dur[1]=100
vc.amp[2]= -60 //NMDA 60//AMPA -70//train -65
vc.dur[2]=10000
}

proc KblockNassiOLD(){{
for(x){
	fk=1
	//if(ismembrane("kdr")) for(x) { gkdrbar_kdr(x)= gkdrbar_kdr(x)*fk }	// H Nassi DEN to mplokare (commented) //den mplokarontai apo tous blockers tou Kaliou!
	if(ismembrane("kad")) for(x) { gkabar_kad(x)= gkabar_kad(x)*fk }
	if(ismembrane("Ks"))  for(x) { gKsbar_Ks(x)= gKsbar_Ks(x)*fk } //me to Ks anebainei POLY to depolarization..
	if(ismembrane("kca")) { for(x) {  gbar_kca(x)= gbar_kca(x)*fk }}  //slow Ca
	if(ismembrane("mykca")) { for(x) {  gkbar_mykca(x)= gkbar_mykca(x)*fk }} //fast Ca
	if(ismembrane("Naf")) for(x) {  gnafbar_Naf(x)= gnafbar_Naf(x)*0 }
	if(ismembrane("nap")) for(x) {  gnabar_nap(x)= gnabar_nap(x)*0 }
	if(ismembrane("can")) for(x) {  gcalbar_can(x)= gcalbar_can(x)*fk } //me to can anebainei ligo to depolarization..
	if(ismembrane("cat")) for(x) {  gcatbar_cat(x)= gcatbar_cat(x)*fk } //mplokaroume k ta Ca, giati den kanoun diafora sto amplitude, alla einai pio sta8era sto Vclamp!	
	if(ismembrane("cal")) for(x) {  gcalbar_cal(x)= gcalbar_cal(x)*fk }
	//if(ismembrane("calc")) for(x) {  gcabar_calc(x)= gcabar_calc(x)*0 }
	if(ismembrane("car")) for(x) {  gcabar_car(x)= gcabar_car(x)*fk }
	}}}

objref KSi[1], PCv[1], KSt[1],PCt[1], vsoma
proc rec_Dtype_Current(){
	//i=0
	KSi[0]=new Vector(n)
	KSt[0]=new Vector(n) //different dt vector needed from $@#%@$#% NEURON..
	for j=0,n-1 {KSt[0].x[j]=j*dt }
	Pcells[0].soma cv.record(&Pcell[0].soma.ik_Ks(0.5),KSi[0],KSt[0],1)
}
proc rec_soma_Voltage(){
	PCv[0]=new Vector(n)
	PCt[0]=new Vector(n) //different dt vector needed from $@#%@$#% NEURON..
	for j=0,n-1 {PCt[0].x[j]=j*dt }
	Pcells[0].soma cv.record(&Pcell[0].soma.v(0.5),PCv[0],PCt[0],1)
}

proc save_Dtype_Current() {
	vsoma = new File()		
	sprint(temp,"TEMPS/DtypeI_%d_%d.txt", GPYID,runs)  //RS/IB classification!
	vsoma.wopen(temp)
	for sb=0, KSi[0].size()-1 { 
		vsoma.printf ("%f\n",KSi[0].x[sb])
	}
	vsoma.close()
}
proc save_Dsoma_Voltage() {
	vsoma = new File()		
	sprint(temp,"TEMPS/SomaV_%d_%d.txt", GPYID,runs)  //RS/IB classification!
	vsoma.wopen(temp)
	for sb=0, PCv[0].size()-1 { 
		vsoma.printf ("%f\n",PCv[0].x[sb])
	}
	vsoma.close()
}



//////////////////////////////////
//-----------------------------------------------------Multiple Runs

//addgraph("Pcell[0].soma.cai(0.5)",-70,50)
//addgraph("Pcell[0].soma.ica_cal(0.5)",-70,50)
//addgraph("Pcell[0].soma.ica_cat(0.5)",-70,50)
//addgraph("Pcell[0].soma.ica_car(0.5)",-70,50)
//addgraph("Pcell[0].soma.ica_can(0.5)",-70,50)
//addgraph("Pcell[0].soma.cai(0.5)",-70,50)
//addgraph("Pcell[0].soma.ihi_h(0.5)",-70,50)
//addgraph("Pcell[0].soma.in_ica(0.5)",-70,50)
//addgraph("Pcell[0].soma.ik_kad(0.5)",-70,50)
//addgraph("Pcell[0].soma.ik_kca(0.5)",-70,50)
//addgraph("Pcell[0].soma.ik_mykca(0.5)",-70,50)
//addgraph("Pcell[0].soma.ik_Ks(0.5)",-70,50)
//addgraph("Pcell[0].soma.ik_kdr(0.5)",-70,50)
//addgraph("Pcell[0].soma.ina_Naf(0.5)",-70,50)
//addgraph("Pcell[0].soma.ina_nap(0.5)",-70,50)
//addgraph("soma.v(0.5)",-70,50)    //soma
//addgraph("Pcell[0].soma.cai(0.5)",-70,50)
//addgraph("Pcell[0].soma.ica(0.5)",-70,50)


//test code
//for GPYID = 1,1 {
	IC_AMP = 0.05
	//for runs = 0, 10 {
	//r1=new Random(runs)
	//objref Pcells[nPcells]
	//Load new morphology
	//createPyrs()
	
	//fadp = 0.1
	//sadp_soma()
	//sadp_dend()
	//sadp_apical()

train()
	//IClump() 
 //vclamp()
//addgraph_2("vc.i", 0,tstop, -70, 50)
//	KblockNassiOLD()

	//print IC_AMP

	//rec_Dtype_Current()
	//rec_soma_Voltage()
	run()
	//save_Dtype_Current()
	//save_Dsoma_Voltage()

	IC_AMP = IC_AMP+0.05

	//}
//}



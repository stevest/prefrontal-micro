//--------------Set parameters and run this for the net (4 Pcells and 1 Interneuron)
//--------------Written 8-5-08, modified 08-10-08
load_file("nrngui.hoc")          //load main NEURON library
cvode.active(0)     
load_file("main_parameters.hoc")	
objref PC
PC=new ParallelContext()//
xopen("parfuncs.hoc")

////////////////////////////////////////////
////////////////////////////////////////////
//----------------------------------------Set parameters--------------------------------------------------------------//
tstop=500 

xopen("../../lib/basic-graphics.hoc")
xopen("../define_objects.hoc")
xopen("../RS1cell.hoc") 
xopen("incell.hoc")

total=200
objref ns1, ns2, ic1, ic2
objref gabab[total][total]


//--------------------------------------Graphs
//for j=0, (nPcells-1) {addgraph_2("Pcells[j].soma.v(0.5)", 0,tstop, -70, 50)}
addgraph_2("Pcells.o(0).soma.v(0.5)", 0,tstop, -70, 50)
//addgraph_2("dend[7].v(1)",0,tstop,-75,110) //basal 151um
//addgraph_2("Pcells[5].soma.v(0.5)", 0,tstop, -70, 50)
//addgraph_2("INcells.o(0).soma.v(0.5)", 0,tstop, -80, 50)
splot=new Shape()
//forsec Pcells.o(0).somatic {shape.color(2)}
//forsec Pcells.o(0).axonal {shape.color(5)}
//forsec Pcells.o(0).basal {shape.color(3)}
//forsec Pcells.o(0).apical {shape.color(6)}

//---------------------------------------------Multiple Experiments/Runs---------------------------------------------//
//---For many experiments
strdef syscmd, data_dira, data_dirb, data_dirc, data_dird, running, tmpstr 
//-----Variables
n=int(tstop/dt)
//-----Objects for record data
objref cv
cv=new CVode(0)
objref PCv[nPcells], PCi[nPcells], PCt[nPcells], INv[nINcells], INt[nINcells], PCSi[300], PCSt[300]
printf("DEBUG: PFC NEURONS No: %d\n",nPcells)
printf("DEBUG: INTERNEURONS No: %d\n",nINcells)
strdef temp
objref vsoma1, vsoma2, vsoma3, vsoma4, insoma, insomab, curampa, curnmda, curgabaa, curgabab, DendDist, Params
objref campa[maxsyn], ct[8][inmaxsyn], cnmda[maxsyn], cnmdat[inmaxsyn], cgabaa[maxsyn3], campaa[automaxsyn], cnmdaa[automaxsyn], campain[inmaxsyn], cnmdain[inmaxsyn], cgabaat[maxsyn3], cgabab[maxsyn3], cgababt[maxsyn3], ampac, nmdac, gabaac, gababc	
objref gababweights, nmdaweights, adpweights
//----record total cell population spike activity
objref timevec, idvec, recncs, tobj, nil, total_activity



//---------------------------------Procedure for various checks------------------------------------------------//
objref r1
//r1=new Random(0)
//PID1=r1.uniform(0,1)
//rsid = new Random(1)	
objref conpyr1pyr2[100], nconpyr1pyr2[100], ampapyr1pyr2[100], nmdapyr1pyr2[100]
ns2=new NetStim(0.5)
ns2.interval=5//(in ms!!!)// 20ms in NMDA SPIKES
ns2.number=40 //Single-Paired stimulation
ns2.start=0
ns2.noise=0
objref nc_s1[500]
objref nc_s2[500]
objref ic2[5]


stimIntensity = 1

proc halfAmpl() {
// Create synapses at random basal dendrite locations:
  splot.point_mark_remove()
  //Pcells.o(0).soma distance()

  cd= currentDendrite
  //access Pcells.o(0).dend[cd]
  
  for cs=0, stimIntensity-1 {
    //PID = r1.uniform(0,1)
    PID=0.5 //For the 'same' distance in each dend
    //printf("CD: %d , CS: %d, PID: %.3f returns PathDistance: %.3f \n",cd,cs,PID,distance(PID))
    //printf("CD: %d , CS: %d\n",cd,cs)

    Pcells.o(0).soma {
      gabab[runs][cd] = new GABAb(PID)
    }
    //print nmda[runs][cd][cs].inmda(PID)
    //addgraph_2("nmda[runs][cd][cs].inmda(PID)", 0,tstop, -70, 50)

    splot.point_mark(gabab[runs][cd],cd+1) //colorize
    
    nc_s2[cs]=new NetCon(ns2, gabab[runs][cd])
    nc_s2[cs].delay=200
    nc_s2[cs].weight=gababweight
    nc_s2[cs].threshold=-20

  }
}


//--------------------------------------------------------------Vclamp
objref vc, vc2
proc vclamp() {
//  INcells.o(0).soma{
//    vc = new VClamp(0.5)
//  } 
//  vc.amp[0]= 100 
//  vc.dur[0]=tstop

  Pcells.o(0).soma {
    vc2 = new VClamp(0.5)
  } 
  vc2.amp[0]= -65
  vc2.dur[0]=tstop


//  vc.amp[1]=-100
//  vc.dur[1]=200
//  vc.amp[2]=vc.amp[0]
//  vc.dur[2]=200
}


proc rec_VClamp_Current(){
  PCi[0]=new Vector(n)
  PCt[0]=new Vector(n) 
  Pcells.o(0).soma cv.record(&gabab[0][0].i,PCi[0],PCt[0],0)
}

//proc rec_IClamp_Current(){
//  PCi[0]=new Vector(n)
//  PCt[0]=new Vector(n) 
//  Pcells.o(0).dend[currentDendrite] { cv.record(&ic.a,PCi[0],PCt[0],0) }
//}

strdef syscmd, data_dir

proc save_VClamp_Current() {    
  vsoma = new File()		
  sprint(data_dir,"data/%d",Fincrement)
  sprint(syscmd,"mkdir -p %s",data_dir)
  system(syscmd)

  sprint(temp,"%s/gabab_%d.txt", data_dir, increment) 
  vsoma.wopen(temp)
  for sb=0, PCi[0].size()-1 { 
          vsoma.printf ("%f\n",PCi[0].x[sb])
  }
  vsoma.close()
}

//////////////////////////////////
//-----------------------------------------------------Multiple Runs
n=int(tstop/dt)
objref cv
cv=new CVode(0)
objref PCv[nPcells]
objref PCi[nPcells]
objref PCt[nPcells]
objref INv[nINcells]
objref INt[nINcells]
strdef temp, tmpstr
objref vsoma1, vsoma2, vsoma3, vsoma4, insoma, curampa, curnmda, curgabaa, curgabab
objref campa[maxsyn+automaxsyn], campat[maxsyn+automaxsyn], cnmda[maxsyn+automaxsyn], cnmdat[maxsyn+automaxsyn], cgabaa[maxsyn3], cgabaat[maxsyn3], cgabab[maxsyn3], cgababt[maxsyn3], ampac, nmdac, gabaac, gababc, generalfile

gabaa_b=1


currentDendrite=0
Fincrement=1 //Tau1 or Tau2
r1=new Random(1)
rsid = new Random(2)

runs=0
BasalNo=0
forsec Pcells.o(0).basal { BasalNo+=1 }

  //for currentDendrite=0,BasalNo-1{
  objref nc_s1[500]
  objref nc_s2[500]

  halfAmpl()
  addgraph_2("gabab[0][0].i", 0,tstop, -70, 50)

  rec_VClamp_Current()

  increment = currentDendrite

  run()

  save_VClamp_Current() 
// }
quit()


// will be Vectors that record all spike times (tvec) 
// see also http://www.neuron.yale.edu/neuron/static/docs/help/neuron/neuron/classes/parcon.html#spike_record

// store voltage currents to files
strdef str, vfilePC_filename, EXEC_CMD

// If you save the stdout to a file you can sort the results. A nice idiom is sort -k 1n,1n -k 2n,2n temp1 > temp
//All the spike times and cells are the same as in the serial implementation, as we can verify by capturing the outputs of the two programs to files, sorting the parallel output, and comparing
//$ # numeric sort on spike time, then cell id 
//$ sort -n -k 1 -k 2 serout.txt > sorted_serout.txt 
//$ sort -n -k 1 -k 2 parout.txt > sorted_parout.txt 
//$ cmp sorted_serout.txt sorted_parout.txt

// see this here on the topic of storing membrane voltage in a parallel context: http://www.neuron.yale.edu/phpbb/viewtopic.php?f=31&t=1987
objref r_volts[nPCcells],r_msec,r_dmsec
objref r_dvolts[nPCcells][DEND_NSEG]
//objref r_dvolts[offsets.x[offsets.size()-1]]
// each recorded range variable must have a separate tvec which will be different for different cells
objref recordedCells
recordedCells = new Vector()
objref recordedDends
recordedDends = new Vector()
// recording routines for the parallel context
proc par_rec_soma_voltage(){local i,s,q,trgGID,trg,lid  // use gid as parameter
	trgGID = $1
	if (PC.gid_exists(trgGID)) { 
		//if(DEBUG){printf("Recording cell %d voltage on node %d\n", $1,PC.id)}
		lid=recordedCells.size()
		//You also need to save PV cells!
		//for lid = 0, PCgids.size()-1 {
		//lid = gid2local(PCgids,trgGID) //target cell	
		//if (lid >= 0) {
		r_volts[lid]=new Vector(n)
		r_msec = new Vector(n)
		//Also a known bug:
		//http://www.neuron.yale.edu/phpbb/viewtopic.php?f=31&t=2046
		for q=0,n-1 {r_msec.x[q]=q*dt }
		PC.gid2cell(trgGID).soma {cv.record(&v(0.5),r_volts[lid],r_msec,0)}
		recordedCells.append(trgGID)
		//}
	}
}

proc par_rec_dend_voltage(){local i,s,q,trgGID,trg,lid  // use gid as parameter
	trgGID = $1
	if (PC.gid_exists(trgGID)) { 
		r_dmsec = new Vector(n)
		for q=0,n-1 {r_dmsec.x[q]=q*dt }
		//for lid = 0, PCgids.size()-1 {
			//lid = gid2local(PCgids,trgGID) //target cell	
			lid = recordedDends.size()
			initial = (1/DEND_NSEG)/2
			//print "Initial step is ",initial
			for cseg = 0,DEND_NSEG-1 {
				r_dvolts[lid][cseg]=new Vector(n)
				csegloc = initial + (1/DEND_NSEG)*cseg

				//print "@=",PC.id," Recording dend=",trgGID," in seg  ",cseg," location=",csegloc," trgGID=",trgGID
				//print "@=",PC.id," csegloc",csegloc,"(1/Dendnseg)",(1/DEND_NSEG),"*cseg",cseg,"==",initial+(1/DEND_NSEG)*cseg," trgGID=",trgGID
				PC.gid2cell(trgGID).dend {cv.record(&v(csegloc),r_dvolts[lid][cseg],r_dmsec,0)}
			}
			recordedDends.append(trgGID)
	}
}


//Control variables
PLOT = 0
DUMMY_RUN = 0
SHUFFLE_SYNAPSES = 0
save_synaptic_locations = 0 
save_pvsynaptic_locations = 0
save_stimulation_locations = 0 
save_background_locations = 0 
save_synaptic_delays = 0 
save_pvsynaptic_delays = 0
save_inmda = 0 
save_dend_voltage = 0 
save_bg_iampa = 0 
// Experimental setup
//tstop=10 //defined externaly
steps_per_ms=10
dt=1/steps_per_ms
n=int(tstop/dt)
celsius=34

objref r_msec
r_msec = new Vector(n)
for k=0,n-1 {r_msec.x[k] = k*dt }
//-------------------------------------------------------------
//Primary synapses (Xenia)
Stim_MaxSyn_apic=100//16 min by Nassi criterion	//initial stimulation
Stim_MaxSyn_basal=100//16 min by Nassi criterion	//initial stimulation
Stim_MaxSyn = Stim_MaxSyn_apic+Stim_MaxSyn_basal
PC2PC_MaxSyn = 5//24 //Xenia had 24	//PC-PC connections Thomson 2007, (to have 87% excitatory synapses, Peters, 2008)
PC_MaxAutosyn=1//XENIA //1	//autosynapses (one third, Lubke, 1996)
PV2PV_MaxSyn=12//NASSI	//IN-IN connections
PC2PV_MaxSyn=2//XENIA//2//12	//PC-IN connections (Thomson, 2007) (Markram, 2004sup2)
PV2PC_MaxSyn=4//NASSI//15//XENIA	13//IN-PC connections to soma (Peters,2008,Tamas,1997,J.Physiology,Perez,Larkum,2006)(15-Tamas 1997, Markram 2004)

//-----Objects for record data
//CHANGES after installing devel version 7.4:
//the ../../lib/current-balance.hoc is hit and cvode is never declered
//the graphs hoc file has invalid declerations (due to --without-iv maybe?)
//the v_init variable is never defined? (was it an internal NEURON variable?)
//v_init variable is in nrngui.hoc so we need to define it:
v_init = -66 
objref cv, vc, ic[10]
cv=new CVode(0)
if(cv.active(0)){print "ERRORRRR!"}	     //Do NOT use CVODE solver!
if(!cv.use_long_double(1)){print "ERRORRRR!"}//was cvode
if(!cv.cache_efficient(1)){print "ERRORRRR!"}

strdef sout
if (name_declared("CLUSTER_ID")!=5){
	CLUSTER_ID = 0//default cluster
}

if (name_declared("EXPERIMENT")!=5){
	exit(1)
}


sprint(pprintStr,"Microcircuit running with simplified morphologies !\n\n")
pprint(pprintStr)


if (name_declared("CLUSTBIAS")!=5){
	exit(1)
}
if (name_declared("EXCITBIAS")!=5){
	exit(1)
}
if (name_declared("INHIBIAS")!=5){
	exit(1)
}

// given a cell index ($1) and the type of cell ($2), return the gid
// As for $2, 0 stands for pyramidal cells, 1 for PVs
objref offsets
{offsets = new Vector()}
{offsets.append(0,nPCcells,nPVcells)}
{offsets.append(offsets.sum(0,offsets.size()-1))}

//global_gid=offsets.v[offsets.size()-1]  // points to the next available gid
func ind2gid(){local i  
  if(numarg()<2) { printf("wrong number of arguments to func ind2gid") }
  i=$1+offsets.sum(0,$2)
  if(i>=offsets.sum(0,$2+1)) { i-=1 }   
  return i 
}

// register the connection target locally given a synapse gid and a synapse mechanism as arguments
// if given additional arguments, it will set them as weight, delay, and threshold, respectively
// http://www.neuron.yale.edu/phpbb/viewtopic.php?f=31&t=2158
obfunc makeSynapse(){ localobj nc, src
	if(PARALLEL){
		nc=PC.gid_connect($3,$o4)

	}else{
		src = $o1
		access src.o($2).axon
		nc = new NetCon(&v(x),$o4)
	}
	nc.threshold = $5
	nc.delay = $6
	nc.weight = $7
	return nc
}

func gid2local(){local i localobj arg
	arg = $o1
	for i=0, arg.size()-1 {
		if(arg.x(i) == $2){
			return i
		}
	}
	return -1 //if error
}

strdef mname,sprop,tempString
objref mt,pp,mechFile


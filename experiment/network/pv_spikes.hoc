strdef STDOUT, PPRINT_CMD,EXEC_CMD, PATH, STRING
PATH = "/home/cluster/stefanos/Documents/GitHub/prefrontal-micro/experiment/network/"
if(!load_file("/home/cluster/stefanos/Libraries/nrn/share/nrn/lib/hoc/nrngui.hoc")){print "ERROR	Failed to load NEURON!"}			//load main NEURON library
//{load_file("/home/cluster/stefanos/Libraries/nrn/share/nrn/lib/hoc/stdrun.hoc")}
objref PC
PC = new ParallelContext()
PARALLEL  = 0

steps_per_ms=10
dt=1/steps_per_ms
n=int(tstop/dt)
celsius=34

tstop = 500 
nPVcells = 1

v_init = -73 
objref cv
cv=new CVode(0)
if(cv.active(0)){print "ERRORRRR!"}	     //Do NOT use CVODE solver!
if(!cv.use_long_double(1)){print "ERRORRRR!"}//was cvode
if(!cv.cache_efficient(1)){print "ERRORRRR!"}


{xopen("pv.hoc")}

//Balance each cell compartment to the prefered voltage and comply with NEURON initialization routines.
proc balance_compartments() {
	//Do not call finitialize with v_init argument, because it sets it in all cells
	// created up to this point!
	forsec PVcell_list {
		for (x) {
			v(x) = -73
		}
	}
	finitialize()
	forsec PVcell_list {
		for (x) {
			if (ismembrane("na_ion")) {e_passive(x)=v(x)+ina(x)/g_passive(x)} 
			if (ismembrane("k_ion")) {e_passive(x)=e_passive(x)+ik(x)/g_passive(x)} 
			if (ismembrane("ca_ion")) {e_passive(x)=e_passive(x)+ica(x)/g_passive(x)}     
			if (ismembrane("h")) {e_passive(x)=e_passive(x)+ihi(x)/g_passive(x)}
		}
	}
	fcurrent()
/*
	if (cv.active()) {
		cv.re_init()
	}       else {
		fcurrent()
	}
	frecord_init()
*/
}

// This function is used to balance the membrane potential to v_init (= -70 mV)
// written by Yiota Poirazi, July 2001, poirazi@LNC.usc.edu

proc current_balancein() {

  finitialize(-73)
  //fcurrent()

  printf("Balancing each compartment to %d mV\n", -73)

  forsec PVcell_list{
   for (x) {
    	if (ismembrane("na_ion")) {e_passive(x)=v(x)+ina(x)/g_passive(x)} 
   	if (ismembrane("k_ion")) {e_passive(x)=e_passive(x)+ik(x)/g_passive(x)} 
      	if (ismembrane("ca_ion")) {e_passive(x)=e_passive(x)+ica(x)/g_passive(x)}
       if (ismembrane("h")) {e_passive(x)=e_passive(x)+ihi(x)/g_passive(x)}
    }
  }
fcurrent()
}



//current_balancein()
//balance_compartments()
//-------------------Set synaptic weights

objref r, PVv, vsoma
objref PCvd, PCvdd, PCvddd

synapses = 2 

objref NS[1]
objref isir
isir = new Random()
isir.normal(0,3)

NS[0]=new NetStim()
NS[0].interval=10//isir.repick()
NS[0].number=100
NS[0].start=50
NS[0].noise=0

r = new Random(0)
r.normal(0, 0.3)

objref rl
rl = new Random()
rl.uniform(0,1)

objref ampapr[synapses], nmdapr[synapses], nc1[synapses], nc2[synapses]

for iters = 0, 40-1{
WF = iters+1
ampaweightin=	7.5e-4 * WF			//according to Wang,Gao,2009
nmdaweightin=	3.2e-4 * WF //SOS MAKE PV FASTER!			//ratio inmda/iampa for interneuron *0.5(Wang,Gao,2009)
	print "---------------------"
	print "AMPAw=",ampaweightin
	print "NMDAw=",nmdaweightin 
	PID=0.1
	for syn=0,synapses-1{
		//print "adding synapse with WF=",WF
		PVcells.o(0).soma ampapr[syn] = new GLUIN(PID)
		PVcells.o(0).soma nmdapr[syn] = new NMDA(PID)
		nc1[syn]=new NetCon(NS[0], ampapr[syn])
		nc1[syn].delay=1
		nc1[syn].weight=ampaweightin
		nc2[syn]=new NetCon(NS[0], nmdapr[syn])
		nc2[syn].delay=1
		nc2[syn].weight=nmdaweightin
	}
	

//current_balancein()
balance_compartments()
	PVv = new Vector()
	PVv.record(&PVcells.o(0).soma.v(.5)) 
	/*
	PCvd = new Vector()
	PCvd.record(&PCcells.o(0).dend.v(0.1)) 
	PCvdd = new Vector()
	PCvdd.record(&PCcells.o(0).dend.v(0.5)) 
	PCvddd = new Vector()
	PCvddd.record(&PCcells.o(0).dend.v(0.9)) 
	*/
	run()
	vsoma = new File()		

	sprint(STRING,"DATA/pv_WF%07.3f.txt", WF)
	print STRING
	vsoma.wopen(STRING)
	for j=0, PVv.size()-1 {
		vsoma.printf ("%f\n",PVv.x[j])
	}
	vsoma.close()
/*
	vsoma = new File()		
	sprint(STRING,"DATA/dend/nmda_loc_%d_syn_%d_nmdaw_%g_ISI_%d_dend_%g.txt", loc, syn,nmdaVect.x[nw], ISI, 0.1)
	vsoma.wopen(STRING)
	for j=0, PCvd.size()-1 {
		vsoma.printf ("%f\n",PCvd.x[j])
	}
	vsoma.close()
	vsoma = new File()		
	sprint(STRING,"DATA/dend/nmda_loc_%d_syn_%d_nmdaw_%g_ISI_%d_dend_%g.txt", loc, syn,nmdaVect.x[nw], ISI, 0.5)
	vsoma.wopen(STRING)
	for j=0, PCvdd.size()-1 {
		vsoma.printf ("%f\n",PCvdd.x[j])
	}
	vsoma.close()
	vsoma = new File()		
	sprint(STRING,"DATA/dend/nmda_loc_%d_syn_%d_nmdaw_%g_ISI_%d_dend_%g.txt", loc, syn,nmdaVect.x[nw], ISI, 0.9)
	vsoma.wopen(STRING)
	for j=0, PCvddd.size()-1 {
		vsoma.printf ("%f\n",PCvddd.x[j])
	}
	vsoma.close()
*/
}

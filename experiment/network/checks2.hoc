//--------------Set parameters and run this for the net (4 Pcells and 1 Interneuron)
//--------------Written 8-5-08, modified 08-10-08
load_file("nrngui.hoc")          //load main NEURON library
cvode.active(0)     
////////////////////////////////////////////
//----------------------------------------Set parameters--------------------------------------------------------------//
tstop=700 //was 700 for AMPA
steps_per_ms=10
dt=0.1
celsius=34
//-------------------Set synaptic weights
ampaweightpr=	0.00013			//Initial stimulus
nmdaweightpr=	0.00018			//Initial stimulus
ampaweight=	0.00019		//According to Wang(2008)
nmdaweight=	0.52//51//0.41			//ratio inmda/iampa in basal dendrites:1 (Wang,Gao,2008)
gabaweight=	6.9e-4 			//According to Woo(2007)
//gabaweightb=	0.654e-4
ampaweightin=	7.5e-4			//according to Wang,Gao,2009
nmdaweightin=	3.2e-4			//ratio inmda/iampa for interneuron *0.5(Wang,Gao,2009)
autogabaweight=	5.1e-4			//According to Bacci (2003) 
//------------------Set # of synapses
inmaxsyn=	90			//initial stimulation
maxsyn=		22	 //was5		//PC-PC connections
automaxsyn=	1			//autosynapses (one third, Lubke, 1996)
maxsyn1=	12			//IN-IN connections
maxsyn2=	2			//PC-IN connections (Thomson, 2007)
maxsyn3=	4			//IN-PC connections (Peters,2008,Tamas,1997,J.Physiology,Perez,Larkum,2006)

xopen("../../lib/basic-graphics.hoc")
xopen("../define_objects.hoc")
xopen("../RS1cell.hoc") 
//xopen("incell.hoc")	
//xopen ("net.hoc")                    	//load net structure


//------------------------------------Pharmacological procedures
//fadp=1.117*0//0.5//0.23
proc sadp_soma() {
	forsec soma_list{
		for(x) {
			if(ismembrane("ican")) for(x) { gbar_ican(x)= 0.0001*fadp } 
		}}}
proc sadp_dend() {
	forsec dend_list{
		for(x) {
			if(ismembrane("ican")) for(x) { gbar_ican(x)= 0.0001*0.1*fadp} 
		}}}

//--------------------------------------Graphs
//for j=0, (nPcells-1) {addgraph_2("Pcells[j].soma.v(0.5)", 0,tstop, -70, 50)}
//addgraph_2("Pcells[0].soma.v(0.5)", 0,tstop, -70, 50)
//addgraph_2("Pcells[5].soma.v(0.5)", 0,tstop, -70, 50)
//addgraph_2("INcells[0].soma.v(0.5)", 0,tstop, -80, 50)
splot=new Shape()
//forsec Pcells[0].somatic {shape.color(2)}
//forsec Pcells[0].axonal {shape.color(5)}
//forsec Pcells[0].basal {shape.color(3)}
//forsec Pcells[0].apical {shape.color(6)}

//---------------------------------------------Multiple Experiments/Runs---------------------------------------------//
//---For many experiments
strdef syscmd, data_dira, data_dirb, data_dirc, data_dird, running, tmpstr 
//-----Variables
n=int(tstop/dt)
//-----Objects for record data
objref cv
cv=new CVode(0)
objref PCv[nPcells], PCi[nPcells], PCt[nPcells]//, INv[nINcells], INt[nINcells]
printf("DEBUG: PFC NEURONS No: %d\n",nPcells)
//printf("DEBUG: INTERNEURONS No: %d\n",nINcells)
strdef temp
objref vsoma1, vsoma2, vsoma3, vsoma4, insoma, insomab, curampa, curnmda, curgabaa, curgabab, DendDist, Params
objref campa[maxsyn], ct[8][inmaxsyn], cnmda[maxsyn], cnmdat[inmaxsyn], cgabaa[maxsyn3], campaa[automaxsyn], cnmdaa[automaxsyn], campain[inmaxsyn], cnmdain[inmaxsyn], cgabaat[maxsyn3], cgabab[maxsyn3], cgababt[maxsyn3], ampac, nmdac, gabaac, gababc	
objref gababweights, nmdaweights, adpweights
//----record total cell population spike activity
objref timevec, idvec, recncs, tobj, nil, total_activity
xopen("values_gabaweight.hoc")
xopen("values_nmda.hoc")
xopen("values_adp.hoc")

////////////////////////////////////////////
////////////////////////////////////////////
/*
xopen ("net.hoc")                    //load net structure
strdef syscmd
strdef data_dir
data_dir = "data"
sprint(syscmd, "mkdir -p %s", data_dir)  // make the data directory
system(syscmd)
//-----------------------------Set parameters-----------------------------------------------------------------------//
tstop=1500
steps_per_ms=10
dt=0.1
//----------------------Set synaptic weights
ampaweightpr=0.00008		//Initial stimulus
ampaweight=0.000065		//According to Nevian(2007)
nmdaweight=ampaweight*35	//The net has been standarized for ratio inmda/iampa in basal dendrites:1 (Wang,Gao,2008)

gabaweight=0.00083		//According to Woo(2007)
gabaweightb=gabaweight*0.78	//According to Thomson(1999)

ampaweightin=0.000085		//according to Angulo,Audiant,1999
nmdaweightin=ampaweightin*0.6	//ratio inmda/iampa for interneuron *0.2(Angulo,Audinat,1999)
autogabaweight=0.00073*11	//According to Bacci (2003)

//---------------------Set # of synapses
inmaxsyn=120			//initial stimulation
maxsyn=24			//PC-PC connections
automaxsyn=8			//autosynapses (one third, Lubke, 1996)
maxsyn1=1			//IN-IN connections
maxsyn2=12			//PC-IN connections (Melchitky,2001)
maxsyn3=15			//IN-PC connections (Peters, 2008)
lmaxsyn=24			//later stimulation
*/
//---------------------------------Procedure for various checks------------------------------------------------//
objref r1, ns2, ns3
r1=new Random(0)
PID=r1.uniform(0,1)
rsid = new Random(1)	
objref conpyr1pyr2[100], nconpyr1pyr2[100], ampapyr1pyr2[100], nmdapyr1pyr2[100]
ns2=new NetStim(0.5)
ns2.interval=50 //(in ms!!!)// 20ms in NMDA SPIKES
ns2.number=1
ns2.start=0
ns2.noise=0
TAU1 = 5
ALPHA = 10
BETA = 0.61



proc Kblock(){
forall{
for(x){
	fk=0
	//if(ismembrane("kdr")) for(x) { gkdrbar_kdr(x)= gkdrbar_kdr(x)*fk }	//den mplokarontai apo tous blockers tou Kaliou!
	if(ismembrane("kad")) for(x) { gkabar_kad(x)= gkabar_kad(x)*fk }
	if(ismembrane("Ks"))  for(x) { gKsbar_Ks(x)= gKsbar_Ks(x)*fk } 
	//if(ismembrane("kca")) { for(x) {  gbar_kca(x)= gbar_kca(x)*fk }} 
	//if(ismembrane("mykca")) { for(x) {  gk_mykca(x)= gk_mykca(x)*fk }} 
	if(ismembrane("Naf")) for(x) {  gnafbar_Naf(x)= gnafbar_Naf(x)*0 }
	if(ismembrane("nap")) for(x) {  gnabar_nap(x)= gnabar_nap(x)*0 }
	if(ismembrane("can")) for(x) {  gcalbar_can(x)= gcalbar_can(x)*0 }
	if(ismembrane("cat")) for(x) {  gcatbar_cat(x)= gcatbar_cat(x)*0 }			
	if(ismembrane("cal")) for(x) {  gcalbar_cal(x)= gcalbar_cal(x)*0 }
	//if(ismembrane("calc")) for(x) {  gcabar_calc(x)= gcabar_calc(x)*0 }
	if(ismembrane("car")) for(x) {  gcabar_car(x)= gcabar_car(x)*0 }
	}}}
	
	
	
ns3=new NetStim(0.5)
ns3.interval=20 //(in ms!!!)// 20ms in NMDA SPIKES
ns3.number=2
ns3.start=0
ns3.noise=0

objref auxilist_basal[1]
auxilist_basal[0] = new List()
objref random_basal[1]
random_basal[0] = new SectionList()

objref ampa[1][400], nmda[1][400]  , nc3[1][400], nc4[1][400]


//process for checking NMDA spikes!
proc spikesNMDA_1() { local cn, cs, num
cn=0 //A single PF cell!

	auxilist_basal[cn].remove_all() //CLEAR previous
	forsec Pcells[cn].basal { //access cell from template!
		auxilist_basal[cn].append( new SectionRef() )
	}
	printf("Auxilist.basal.count = %d\n",auxilist_basal[cn].count())	
		asec_basal = auxilist_basal[cn].o(($1)-1)
		access asec_basal.sec
		print secname()

		for cs = 0,($2) { //Intencity (No of synapses)..
			PID = r1.repick()
			ampa[cn][cs] = new GLU(PID)
			nmda[cn][cs] = new nmda_segev(PID)
			splot.point_mark(ampa[cn][cs],cn+1) //colorize

			//DO NOT CONNECT AMPA in NMDA VClamp!!!!!
			nc3[cn][cs]=new NetCon(ns3, ampa[cn][cs])
			nc3[cn][cs].delay=250
			nc3[cn][cs].weight=0.00015//0.000065//*11
			nc3[cn][cs].threshold=-20
			
			nc4[cn][cs]=new NetCon(ns3, nmda[cn][cs])
			nc4[cn][cs].delay=250
			nc4[cn][cs].weight=0.37//0.025//.000065*35//*0.1
			nc4[cn][cs].threshold=-20
		}
}  //END proc


//-----------------------------------Pharmacological procedures
/*
fi2=0//0.022//0.075//0.11
proc sadp_soma() {
forsec soma_list{
for(x) {
	fi1=0   
	if(ismembrane("ip3")) for(x) { gcabar_ip3(x)= gcabar_ip3(x)*fi1 }
	if(ismembrane("ican")) for(x) { gbar_ican(x)= 0.001*fi2 } 
	}}}
proc sadp_dend() {
forsec dend_list{
for(x) {
	fi1=0   
	if(ismembrane("ip3")) for(x) { gcabar_ip3(x)= gcabar_ip3(x)*fi1 }
	if(ismembrane("ican")) for(x) { gbar_ican(x)= 0.001*fi2*0.1 } 
	}}}*/
proc ttx() {
forsec pcell_list {
	for(x) {
	if(ismembrane("Naf")) for(x) {  gnafbar_Naf(x)= gnafbar_Naf(x)*0 }
	if(ismembrane("nap")) for(x) {  gnabar_nap(x)= gnabar_nap(x)*0 }
	}}}

/*proc ttxin() {
forsec insoma_list {
	for(x) {
	if(ismembrane("Naf")) for(x) {  gnafbar_Naf(x)= gnafbar_Naf(x)*0 }
	if(ismembrane("Nap")) for(x) {  gnapbar_Nap(x)= gnapbar_Nap(x)*0 }
	}}}
proc calcium_block() {
forsec cell0_list {
	for(x) {
	if(ismembrane("can")) for(x) {  gcabar_can(x)= gcabar_can(x)*0 }
	if(ismembrane("cat")) for(x) {  gcatbar_cat(x)= gcatbar_cat(x)*0 }			
	//if(ismembrane("cal")) for(x) {  gcabar_cal(x)= gcabar_cal(x)*0 }
	if(ismembrane("calc")) for(x) {  gcabar_calc(x)= gcabar_calc(x)*0 }
	if(ismembrane("car")) for(x) {  gcabar_car(x)= gcabar_car(x)*0 }
	}}}
proc validateNMDA () {
forsec cell0_list {
	for(x) {
	if(ismembrane("Naf")) for(x) {  gnafbar_Naf(x)= gnafbar_Naf(x)*0 }
	if(ismembrane("Nap")) for(x) {  gnapbar_Nap(x)= gnapbar_Nap(x)*0 }
	if(ismembrane("kdr")) for(x) {  gkdrbar_kdr(x)= gkdrbar_kdr(x)*0 }
	if(ismembrane("IKs")) for(x) {  gKsbar_IKs(x)= gKsbar_IKs(x)*0 }
	if(ismembrane("kad")) for(x) { gkabar_kad(x)= gkabar_kad(x)*0 }
	if(ismembrane("kca")) for(x) {  gbar_kca(x)= gbar_kca(x)*0}
	if(ismembrane("iC"))  for(x) {  gkcbar_iC(x)= gkcbar_iC(x)*0}
    }}}
proc h_LTP () {
forsec dend_list {
for (x) {
if(ismembrane("h")) for(x) {  gbar_h(x)= gbar_h(x)*0.01 }
}}}
//h_LTP ()
*/

//-------------------------------------------Graphs
//xopen("../bash_templates/basic-graphics.hoc") 	

for j=0, (nPcells-1) {
addgraph_2("Pcells[j].soma.v(0.5)", 0,tstop, -70, 50)
}

// TEMP recording/saving processes:
proc rec_VClamp_Current(){
	i=0
	PCi[0]=new Vector()
	PCt[0]=new Vector(n) //different dt vector needed from $@#%@$#% NEURON..
	for j=0,n-1 {PCt[0].x[j]=j*dt }
	//Pcells[0].soma cv.record(&vc.i,PCi[0],PCt[0],1) 
	access Pcells[0].soma
	cv.record(&v(0.5),PCi[0],PCt[0],1) 
}

proc save_VClamp_Current() {
	vsoma = new File()		
	sprint(temp,"NMDAspikes_%d_%d.txt",increment,intensity)
	//sprint(temp,"NMDA_TAU1_%d.txt", increment)
	vsoma.wopen(temp)
	for sb=0, PCi[0].size()-1 { 
		vsoma.printf ("%f\n",PCi[0].x[sb])
	}
	vsoma.close()
}


//////////////////////////////////
//-----------------------------------------------------Multiple Runs
n=int(tstop/dt)
objref cv
cv=new CVode(0)
objref PCv[nPcells]
objref PCi[nPcells]
objref PCt[nPcells]

strdef temp, tmpstr
objref vsoma1, vsoma2, vsoma3, vsoma4, insoma, curampa, curnmda, curgabaa, curgabab
objref campa[maxsyn+automaxsyn], campat[maxsyn+automaxsyn], cnmda[maxsyn+automaxsyn], cnmdat[maxsyn+automaxsyn], cgabaa[maxsyn3], cgabaat[maxsyn3], cgabab[maxsyn3], cgababt[maxsyn3], ampac, nmdac, gabaac, gababc, generalfile	




increment=1
intensity = 10

for synIntens = 1,6 {
	for runs = 0, 17 {
//--------------------------------------Call procedures

	spikesNMDA_1(increment, intensity)
	ttx() //For NMDA spikes!
	rec_VClamp_Current()
	printf("about to run No: %d\n", increment)
	run()
	save_VClamp_Current() 
	increment = increment +1

}
intensity = intensity + 10
increment = 1
}



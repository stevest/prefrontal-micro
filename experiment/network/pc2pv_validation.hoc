strdef STDOUT, PPRINT_CMD,EXEC_CMD, PATH, STRING, EXPSTR, NOJUMPSTR
PATH = "/home/cluster/stefanos/Documents/GitHub/prefrontal-micro/experiment/network/"
if(!load_file("/home/cluster/stefanos/Libraries/nrn/share/nrn/lib/hoc/nrngui.hoc")){print "ERROR	Failed to load NEURON!"}			//load main NEURON library
//{load_file("/home/cluster/stefanos/Libraries/nrn/share/nrn/lib/hoc/stdrun.hoc")}
objref PC
PC = new ParallelContext()
PARALLEL  = 0


tstop = 700 
//{xopen("./DATA/vstim.hoc")}
xopen("./main_parameters.hoc")
//steps_per_ms=10
//dt=1/steps_per_ms
//n=int(tstop/dt)
//celsius=34
DEND_NSEG = 5
objref v_msec
v_msec = new Vector(n)
for q=0,n-1 {v_msec.x[q]=q*dt }

nPCcells = 1
nPVcells = 1

/*
v_init = -66 
objref cv
cv=new CVode(0)
if(cv.active(0)){print "ERRORRRR!"}	     //Do NOT use CVODE solver!
if(!cv.use_long_double(1)){print "ERRORRRR!"}//was cvode
if(!cv.cache_efficient(1)){print "ERRORRRR!"}
*/

{xopen("pfc_pc_temp.hoc")}
{xopen("pv.hoc")}

//Balance each cell compartment to the prefered voltage and comply with NEURON initialization routines.
proc balance_compartments() {
	//Do not call finitialize with v_init argument, because it sets it in all cells
	// created up to this point!
	finitialize()
	fcurrent()
	forsec PCcell_list {
		for (x) {
			//print "V is: ",v
			if (ismembrane("na_ion")) {e_passive(x)=v(x)+ina(x)/g_passive(x)} 
			if (ismembrane("k_ion")) {e_passive(x)=e_passive(x)+ik(x)/g_passive(x)} 
			if (ismembrane("ca_ion")) {e_passive(x)=e_passive(x)+ica(x)/g_passive(x)}
			if (ismembrane("h")) {e_passive(x)=e_passive(x)+ihi(x)/g_passive(x)}
		}
	}
	fcurrent()
	/*if (cv.active()) {
		cv.re_init()
	}       else {
		fcurrent()
	}*/
	frecord_init()
}

objref r, PCv,PCdv,PCi, vsoma, PCvi, PCiampa
objref PCvd, PCvdd, PCvddd

synapses = 8

objref NS[synapses]
objref gabaa[synapses], gabab[synapses], nc1[synapses], nc2[synapses]
objref nil


NSnoise = 0.0//0.9

r = new Random(0)
r.normal(0, 0.3)

objref rl
rl = new Random()
rl.uniform(0,1)


nmdabias = 3 //TEMP CHANGE! REVERT BACK TO 2!!
ampabias = 1//1


NS=new NetStim()
NS.interval=10//ISI//isir.repick()
NS.number=1//20
NS.start=200
NS.noise=NSnoise


balance_compartments()

proc sadp_soma() {
	forsec PCsoma_list{
		for(x) {
			if(ismembrane("ican")) for(x) { gbar_ican(x)= 0.0 } 
		}
	}
}
proc sadp_dend() {
	forsec PCdend_list{
		for(x) {
			if(ismembrane("ican")) for(x) { gbar_ican(x)= 0.0 } 
		}
	}
}
proc ttx() {
	forsec PCsoma_list {
		for(x) {
			if(ismembrane("Naf")) for(x) {  gnafbar_Naf(x)= gnafbar_Naf(x)*0 }
			if(ismembrane("nap")) for(x) {  gnabar_nap(x)= gnabar_nap(x)*0 }
		}
	}
}
proc calcium_block() {
	forsec PCcell_list{
		for(x) {
			if(ismembrane("can")) for(x) {  gcabar_can(x)= gcabar_can(x)*0 }
			if(ismembrane("cat")) for(x) {  gcatbar_cat(x)= gcatbar_cat(x)*0 }			
			if(ismembrane("cal")) for(x) {  gcalbar_cal(x)= gcalbar_cal(x)*0 }
			if(ismembrane("car")) for(x) {  gcabar_car(x)= gcabar_car(x)*0 }
		}
	}
}
proc validateNMDA () {
        forsec PCcell_list{
                for(x) {
			if(ismembrane("Naf")) for(x) {  gnafbar_Naf(x)= gnafbar_Naf(x)*0 }
			if(ismembrane("nap")) for(x) {  gnabar_nap(x)= gnabar_nap(x)*0 }
			if(ismembrane("kdr")) for(x) {  gkdrbar_kdr(x)= gkdrbar_kdr(x)*0 }
			if(ismembrane("IKs")) for(x) {  gKsbar_IKs(x)= gKsbar_IKs(x)*0 }
			if(ismembrane("kad")) for(x) { gkabar_kad(x)= gkabar_kad(x)*0 }
			if(ismembrane("kca")) for(x) {  gbar_kca(x)= gbar_kca(x)*0}
			if(ismembrane("iC"))  for(x) {  gkcbar_iC(x)= gkcbar_iC(x)*0}
		}
	}
}


objref myvclamp
PVcells.o(0).soma myvclamp = new VClamp(0.5)
myvclamp.dur[0] = tstop
// -65mV as in Kawaguchi and Kubota 2015, eLife
myvclamp.amp[0] = -65
// must produce ~41 pA

INHIBIAS = 15// This bias results in ~90pA max current in pyramidal cell.

// location permutations: permute dend attenuating weights and check current at the soma:
for location = 0, 1-1{
			print "---------------------"

			for syn=0,PC2PV_MaxSyn-1{
				gabaa[syn] = nil
				gabab[syn] = nil
				nc1[syn] = nil
				nc2[syn] = nil
			}
	//decide: how many!
			for syn=0,PC2PV_MaxSyn-1{
			//BIAS : Proximal to the soma:
				PID = 0.01
				print " Placing somatic synapse : ",syn, " in loc ",PID
					PVcells.o(0).dend gabaa[syn] = new GLUIN(PID)
					nc1[syn]=new NetCon(NS, gabaa[syn])
					nc1[syn].delay=1
					nc1[syn].weight=ampaweightin

					PVcells.o(0).dend gabab[syn] = new NMDA(PID)
					nc2[syn]=new NetCon(NS, gabab[syn])
					nc2[syn].delay=1
					nc2[syn].weight=nmdaweightin
			}

			PCv = new Vector(n,0)
			PCv.record(&PCcells.o(0).soma.v(0.5),v_msec,0) 
			PCvi = new Vector(n,0)
			PCvi.record(&myvclamp.i,v_msec,0) 
			//PCvi.record(&nmdapr[0].inmda,v_msec,0) 

			run()
print "RUN FINISHED"

			vsoma = new File()		
			sprint(STRING,"DATA/pc2pv_valid/ivclamp_%s_iter%d.txt",EXPSTR,location)
			print STRING
			vsoma.wopen(STRING)
			for j=0, PCvi.size()-1 {
				vsoma.printf ("%f\n",PCvi.x[j])
			}
			vsoma.close()
/*
			vsoma = new File()		
			sprint(STRING,"DATA/vclamp/vsoma_figure_%d_%s_%d.txt",synapses, EXPSTR,location)
			print STRING
			vsoma.wopen(STRING)
			for j=0, PCv.size()-1 {
				vsoma.printf ("%f\n",PCv.x[j])
			}
			vsoma.close()
*/



print "Vsoma saved"

} //For different dend locations

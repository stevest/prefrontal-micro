//Set parameters and run this for the net (generated from MATLAB scripts)
//Written 1/8/13 stamatiad.st@gmail.com
//tmp
ISBINARY=1
ID=12
strdef pprintStr
strdef PATH, PPRINT_CMD
PATH = "/home/cluster/stefanos/Documents/GitHub/prefrontal-micro/experiment/network/"
inittime=startsw()
{load_file("/home/cluster/stefanos/Libraries/nrn/share/nrn/lib/hoc/stdrun.hoc")}
//define a basic assert function:
proc assert(){ 
	if(!$1){	
		print "Assertion error. Exiting..."
		quit()
	}
}
objref PC
if (name_declared("PARALLEL")!=5) { // PARALLEL has not been assigned a numerical value from command line
        PARALLEL = 0 //Default single core
}
if(PARALLEL){
        {PC=new ParallelContext()}
}
strdef STDOUT, PPRINT_CMD
//process to print only on node zero (if parallel):
proc pprint(){
        //if (name_declared("PC")==2){
        if (PARALLEL){
                if(PC.id==0){print $s1}
        } else {
                print $s1
	}
}
{sprint(STDOUT,"========================================================================================\n")}
{pprint(STDOUT)}
{system("echo $(date)", PPRINT_CMD)}
{sprint(STDOUT, "NEURON MPIRUN STARTING AT: %s",PPRINT_CMD)}
{pprint(STDOUT)}
//JOBID is generated from SGE so get it:
{sprint(STDOUT, "JOB NAME: %s",JOBNAME)}
{pprint(STDOUT)}
{system("echo $JOB_ID", PPRINT_CMD)}
{sprint(STDOUT, "JOB ID: %s",PPRINT_CMD)}
{pprint(STDOUT)}
//{system("echo $JOB_NAME	", PPRINT_CMD)}
//{sprint(JOBNAME, "%s",PPRINT_CMD)}
//JOBNAME: read it from arguments, because of envars bug.
{pprint("Git sha1: ")}
{pprint(GITSHA1)}
//objref strFun
//{strFun = new StringFunctions()}
//{strFun.left(JOBNAME,strFun.len(JOBNAME)-1)}
{sprint(STDOUT,"========================================================================================\n")}
{pprint(STDOUT)}
if(PARALLEL){
        {PC=new ParallelContext()}
        if(PC.id==0){ printf("Microcircuit running in %d CORES !\n\n", PC.nhost()) }
}else{
         printf("Microcircuit running in 'SINGLE CORE' !\n\n")
}

if(PARALLEL){

} else {
if(!load_file("nrngui.hoc")){print "ERROR	Failed to load NEURON!"}			//load main NEURON library
}
if(PARALLEL){PC.barrier}
if(1){pprint("Load NEURON environment.")}
//----------------------------------------Set parameters--------------------------------------------------------------//
//Import netrork parameters (Connectivity, synaptic weights etc..) from MATLAB
strdef EXEC_CMD
EXEC_CMD = ""
if (EXPERIMENT) { //if Structured...
	{sprint(EXEC_CMD,"{xopen(\"%simportNetworkParametersSTR_SN%s_RNDnWc_10_STRnWc_5.hoc\")}",PATH,SN)}
} else {
	sprint(EXEC_CMD,"{xopen(\"%simportNetworkParametersRND_SN%s_RNDnWc_10_STRnWc_5.hoc\")}",PATH,SN)
}
if(PARALLEL){PC.barrier}
tstop = 10000 
//Use execute1() instead of execute() feed the bool into assert
//execute1() does not like the ~ (even if documented otherwise...)
//Also the ~ encloses command in {}, but that is not happening. Go figure..
pprint(EXEC_CMD)
if(1){assert(execute1(EXEC_CMD))}
if(1){pprint("Load Network Parameters.")}
//Load Gap junctions connectivity data:
/*if (EXPERIMENT) { //if Structured...
	{sprint(EXEC_CMD,"{xopen(\"%sexperiment_%d/importGapParametersSTR.hoc\")}",PATH,ID)}
} else {
	sprint(EXEC_CMD,"{xopen(\"%sexperiment_%d/importGapParametersSTR.hoc\")}",PATH,ID)
}*/
if(1){assert(execute1(EXEC_CMD))}
if(PARALLEL){PC.barrier}
if(1){pprint("Load Gap Parameters.")}
/*
EXEC_CMD = ""
{sprint(EXEC_CMD,"{xopen(\"%simportNetworkStimulationHeader.hoc\")}",PATH)}
if(1){assert(execute1(EXEC_CMD))}
*/
/*EXEC_CMD = ""
sprint(EXEC_CMD,"~xopen(\"experiment_%d/importNetworkInhibition.hoc\")",ID)
execute(EXEC_CMD)*/
//if(!xopen("importNetworkParameters.hoc")){print "ERROR	Failed to import network parameters!"}
/*
EXEC_CMD = ""
{sprint(EXEC_CMD,"{xopen(\"%simportBackgroundStimParamsHeader.hoc\")}",PATH)}
if(1){assert(execute1(EXEC_CMD))}
//if(!xopen("importBackgroundStimParams.hoc")){print "ERROR	Failed to import network parameters!"}
*/

EXEC_CMD = ""
{sprint(EXEC_CMD,"{xopen(\"%simportStimulationParameters_SN%s_c1to3_0_9_RND_nW_10_STR_nW_5.hoc\")}",PATH,SN)}
if(1){assert(execute1(EXEC_CMD))}
if(PARALLEL){PC.barrier}
if(1){pprint("Load Stimulation Parameters.")}


//xopen("gap.hoc") //for PV gup junctions

{sprint(EXEC_CMD,"{xopen(\"%smain_parameters.hoc\")}",PATH)}
if(1){assert(execute1(EXEC_CMD))}
//if(!xopen("main_parameters.hoc")){print "ERROR	Failed to load main parameters!"}
if(PARALLEL){PC.barrier}
if(1){pprint("Load Main Parameters.")}
//---For many experiments
strdef syscmd, data_dir, data_dira, data_dirb, data_dirc, data_dird, running, tmpstr

//if(1){assert(sprint(data_dir,"%s",EXP))}
//if(1){assert(sprint(syscmd,"mkdir -p %s/%s",exp_dir,data_dir))}
/*if(1){assert(sprint(syscmd,"mkdir -p %s",JOBDIR))}
{pprint("Creating Experiment Directory...")}
{pprint(syscmd)}
if(!system(syscmd)){
	{sprint(pprintStr,"Directory %s already exists, AND THAT IS CONCERNING.Exiting.",JOBDIR)}
	pprint(pprintStr)
	exit(1)
 }
 */
if(PARALLEL){PC.barrier}
//parse stimulation parameters
objref PcellStimList
{PcellStimList = new Vector(nPCcells,0)}

if(EXPERIMENT){ //if Structured...
	for i=0,PcellStimListSTR[CLUSTER_ID].size()-1{
		PcellStimList.x[PcellStimListSTR[CLUSTER_ID].x[i]]=1
		 {sprint(PPRINT_CMD,"Stimulating cell: %d",PcellStimListSTR[CLUSTER_ID].x[i])}
		pprint(PPRINT_CMD)

	}
} else {
	for i=0,PcellStimListRND[CLUSTER_ID].size()-1{
		PcellStimList.x[PcellStimListRND[CLUSTER_ID].x[i]] = 1

	}
}
if(PARALLEL){PC.barrier}
if(DEBUG){pprint("Parse Stimulation Parameters.")}

objref PcellIDlist
PcellIDlist = new Vector(nPCcells,1)

if(PARALLEL){PC.barrier}
if(DEBUG){pprint("Choose morphologies.")}

if(PARALLEL){
} else {
	if(!xopen("../../lib/basic-graphics.hoc")){print "ERROR	Failed to import parameters!"}
}
{sprint(EXEC_CMD,"{xopen(\"%s../define_objects.hoc\")}",PATH)}
if(1){assert(execute1(EXEC_CMD))}
//if(!xopen("../define_objects.hoc")){print "ERROR	Failed to import parameters!"}
if(PARALLEL){PC.barrier}
if(DEBUG){pprint("Define Objects.")}

{sprint(EXEC_CMD,"{xopen(\"%spfc_pc_temp.hoc\")}",PATH)}
if(1){assert(execute1(EXEC_CMD))}
//if(!xopen("pfc_pc_temp.hoc") ){print "ERROR	Failed to load L5Pyramidal hoc!"}

if(PARALLEL){PC.barrier}
if(DEBUG){pprint("Load cell templates.")}

{sprint(EXEC_CMD,"{xopen(\"%spv.hoc\")}",PATH)}
if(1){assert(execute1(EXEC_CMD))}

if(PARALLEL){PC.barrier}
if(DEBUG){pprint("Load interneuron templates.")}
//fADP for morphology #3:

//overwrite with NASSI's values:
//-------------------Set synaptic weights
ampaweightpr=	0.00024			//Initial stimulus
nmdaweightpr=	0.22			//Initial stimulus
ampaweight=	0.00019		//According to Wang(2008)
gabaweight=	0.00083//XENIA GABAa //6.9e-4 			//According to Woo(2007)
gabaweightb=1.05e-4
ampaweightin=	7.5e-4			//according to Wang,Gao,2009
nmdaweightin=	3.2e-4			//ratio inmda/iampa for interneuron *0.5(Wang,Gao,2009)
autogabaweight=	0.006205				//According to Bacci (2003) 
PC2PV_MaxSyn = 4 //7is the June working
PV2PC_MaxSyn = 3 //SSS //NEW DATA: 1Soma Strong, 2Dend more distal weak, Kubota, eLife, 2015. ALWAYS ON SOMA AND ONE! CHANGE WEIGHT TO CHANGE # SYNAPSES! //4 is the June working //SSS 8elw ligotero GABAa!! 
//------------------Set # of synapses
synapses_backb=300//16//18//60//100
synapses_backpr=300//16//18//60//100
synapses_backa=300//16//18//60//100
synapses_backinh=500
synapses_inh=1

//override complex background spiketrains:
BG_dendSyn = 2//synapses_backb
BG_apicSyn = 2//synapses_backa
BG_apicprSyn = 2//synapses_backpr
BG_PVSyn = 2//synapses_backinh

Stim_MaxSyn_apic = 90 //synapses sto meeting 27/4/15,,,//40//27//90			//initial stimulation
Stim_MaxSyn_basal=0//120	//initial stimulation

/*
gababweights.x[0]=1.05e-4		//0.2
gababweights.x[1]=2.22e-4		//0.4
gababweights.x[2]=3.38e-4		//0.6
gababweights.x[3]=4.65e-4		//0.8
*/
//gabaweight_pv2pc_b = 1.05e-4 //0.2 GABAb/GABAa ratio

gabaweight_pv2pc_a = gabaweight    //3.8// GABA gia to RAND connectivity //OVERRIDED!!
gabaweight_pv2pc_b = gabaweightb   *0.1//0.2//0.1//*0.1 is the June working //*0.4//SSS //3.8// GABA gia to RAND connectivity //OVERRIDED!!

/*nmdaweights.x[0]=0.25		//1.1 ratio //NASSI
nmdaweights.x[1]=0.35		//1.5
nmdaweights.x[2]=0.47		//1.9
nmdaweights.x[3]=0.585		//2.3*/
nmdaweight = 0.585
//ampaweight=	0.00019	//NASSI
taur_cad = 50//36 //SSS

if(PARALLEL){PC.barrier}
if(DEBUG){pprint("Define network parameters.")}
fadp=0.0//1.27//MUST BE SET FOR EACH MORPHOLOGY!!! //.35// (maximum ~7mV (normal gyrw sta 4mV)me train sta 20Hz (5 clamps diarkeias 1ms, ana 50 ms)current clamp)
{sprint(EXEC_CMD,"{xopen(\"%snetwork.hoc\")}",PATH)}
if(1){assert(execute1(EXEC_CMD))}
//if(!xopen ("network.hoc")){print "ERROR	Failed to import network structure!"}

if(PARALLEL){PC.barrier}
if(DEBUG){pprint("Load network parameters.")}

sadp_soma()
sadp_dend()
sadp_apical()  //mplokara kai stous apical
{sprint(EXEC_CMD,"{xopen(\"%srecord_par.hoc\")}",PATH)}
if(1){assert(execute1(EXEC_CMD))}
//assert(xopen ("record_par.hoc"))

if(PARALLEL){PC.barrier}
if(DEBUG){pprint("Load record routines.")}
strdef s
proc report_gidvecs() { local i, rank
	// reports distribution of cells across hosts
	PC.barrier()  // wait for all hosts to get to this point
	if (PC.id==0) printf("\ngidvecs on %d host(s)\n",PC.nhost)
	for rank=0, PC.nhost-1 {  // host 0 first, then 1, 2, etc.
		if (rank==PC.id) {
			//printf("@host %d: %dPC, %dPV, %dCB, %dCR\n",PC.id,PCcells.count(), PVcells.count(), CBcells.count(), CRcells.count() )
			system("hostname",s)
			print "On host: ",s
			PCgids.printf()      
			//PVgids.printf()            
			//CBgids.printf()    
			//CRgids.printf()      
		}
	{ PC.barrier() } // wait for all hosts to get to this point
	}
}

strdef temp
objref timevec, idvec, recncs, tobj, nil, total_activity

strdef foutput

if(PARALLEL){
	if(DEBUG){report_gidvecs()}
	if (PC.id == 0) {
		{sprint(syscmd,"mkdir -p multi_core")}
		{system(syscmd)}
	}
	{ PC.barrier()	}
	{ PC.set_maxstep(steps_per_ms) }
}else{
	{sprint(EXEC_CMD,"{xopen(\"%srecordandsave/record.hoc\")}",PATH)}
	if(1){assert(execute1(EXEC_CMD))}
	{sprint(EXEC_CMD,"{xopen(\"%srecordandsave/save_data.hoc\")}",PATH)}
	if(1){assert(execute1(EXEC_CMD))}
	//assert(xopen("recordandsave/record.hoc"))
	//assert(xopen("recordandsave/save_data.hoc"))
}
/*
//Import respective stimulation/background spikes:
EXEC_CMD = ""
//sprint(EXEC_CMD,"{xopen(\"experiment_%d/importNetworkStimulation_run_%04d.hoc\")}",ID,RUN+1)
{sprint(EXEC_CMD,"{xopen(\"%sexperiment_%d/importNetworkStimulation_run_%04d.hoc\")}",PATH,ID,1)}
{pprint(EXEC_CMD)}
if(1){assert(execute1(EXEC_CMD))}
EXEC_CMD = ""
//sprint(EXEC_CMD,"{xopen(\"experiment_%d/importBackgroundStimParams_run_%04d.hoc\")}",ID,RUN+1)
{sprint(EXEC_CMD,"{xopen(\"%sexperiment_%d/importBackgroundStimParams_run_%04d.hoc\")}",PATH,ID,RUN+1)}
{pprint(EXEC_CMD)}
if(1){assert(execute1(EXEC_CMD))}
{pprint("Done loading external stimulation.")}
*/
//override complex background spiketrains:
//Background activity like Haider
//PC ~1Hz, PV ~14Hz
BG_dendSyn = 2//2 synapses as of 1/10/15 
BG_apicSyn = 2//2 synapses as of 1/10/15
BG_apicprSyn = 2//2 synapses as of 1/10/15
BG_PVSyn = 2 //2 synapses as of

if(1){
	EXEC_CMD = ""
	{sprint(EXEC_CMD,"{stimulation(%d,%d)}",0,0)}
	{assert(execute1(EXEC_CMD))}
	//stimulation(0,0)   //synaptic location Random seed, axon conductanse delay Random seed
	sprint(PPRINT_CMD,"%s executed.\n",EXEC_CMD)
	{pprint(PPRINT_CMD)}
}
//ATTENTION TO WEIGHT OF BG SYNAPSES!! CORRECTED FOR FEWER SYNAPSES!!!! SSS
if(1){
	EXEC_CMD = ""
	{sprint(EXEC_CMD,"{backgroundActivity(%d,%d)}",RUN,0)}
	{assert(execute1(EXEC_CMD))}
	//backgroundActivity(RUN,0) //NO PARALLEL SAFE : try producing the sequence in one node then stimulate each cell
	sprint(PPRINT_CMD,"%s executed.\n",EXEC_CMD)
	{pprint(PPRINT_CMD)}
}
if(1){
	EXEC_CMD = ""
	{sprint(EXEC_CMD,"{backgroundActivityPV(%d,%d)}",RUN,0)}
	{assert(execute1(EXEC_CMD))}
	//backgroundActivityPV(RUN,0) //~11Hz Petersen Carl
	sprint(PPRINT_CMD,"%s executed.\n",EXEC_CMD)
	{pprint(PPRINT_CMD)}
}

//if RUN is a constant Randoms do not change (synapse location etc..)
//connectPC2PC(0,0,Wvec.x[Widx])// synaptic location Random seed, axon conductanse delay Random seed
if(1){
	EXEC_CMD = ""
	{sprint(EXEC_CMD,"{connectPC2PC(%d,%d,%f)}",0,0,0.585)}
	sprint(PPRINT_CMD,"%s executed.\n",EXEC_CMD)
	{pprint(PPRINT_CMD)}
	{assert(execute1(EXEC_CMD))}
	//connectPC2PC(0,0,0.585)// synaptic location Random seed, axon conductanse delay Random seed
}
//GABAbFactor = 10.7//Gvec.x[Gidx]
//network working with 0.47 (1.9) NMDA/AMPA, 10.7 gababfactor and 70 synchronus stim synapses
if(1){
	EXEC_CMD = ""
	{sprint(EXEC_CMD,"{connectPV2PV(%d,%d)}",0,0)}
	sprint(PPRINT_CMD,"%s executed.\n",EXEC_CMD)
	{pprint(PPRINT_CMD)}
	{assert(execute1(EXEC_CMD))}
	//connectPV2PV(0,0)// ssynaptic location Random seed, axon conductanse delay Random seed
}
if(1){
	EXEC_CMD = ""
	{sprint(EXEC_CMD,"{connectPC2PV(%d,%d)}",0,0)}
	sprint(PPRINT_CMD,"%s executed.\n",EXEC_CMD)
	{pprint(PPRINT_CMD)}
	{assert(execute1(EXEC_CMD))}
	//connectPC2PV(0,0)// synaptic location Random seed, axon conductanse delay Random seed
}
if(1){
	EXEC_CMD = ""
	{sprint(EXEC_CMD,"{connectPV2PC(%d,%d)}",0,0)}
	sprint(PPRINT_CMD,"%s executed.\n",EXEC_CMD)
	{pprint(PPRINT_CMD)}
	{assert(execute1(EXEC_CMD))}
	//connectPV2PC(0,0)// synaptic location Random seed, axon conductanse delay Random seed
}

if(1){
	EXEC_CMD = ""
	{sprint(EXEC_CMD,"{noise(%d)}",RUN)}
	{assert(execute1(EXEC_CMD))}
	//noise(RUN)
	sprint(PPRINT_CMD,"%s executed.\n",EXEC_CMD)
	{pprint(PPRINT_CMD)}
}

if(PARALLEL){
	recordedCells = new Vector()
	for pyr=0,offsets.x[3]-1{ // record all cells!
	  par_rec_membrane_voltage(pyr)
	}
	//for lala=0,offsets.x[1]-1{ // record all cells!
	  //par_rec_anyvar(lala)
	//}

	{pprint("----------------------------------------------------------------------------------------")}
	{pprint("Commencing Parallel run!")}
	{pprint("----------------------------------------------------------------------------------------")}
	inittime = startsw() - inittime
	{sprint(PPRINT_CMD,"Network Initialization time: %10.4g minutes.\n", inittime/60)}
	{pprint(PPRINT_CMD)}
	inittime=startsw()
	stdinit() //not such function after devel version 7.4
	inittime = startsw() - inittime
	{sprint(PPRINT_CMD,"Compartment Initialization (stdinit()) time: %10.4g minutes.\n", inittime/60)}
	{pprint(PPRINT_CMD)}
	runtime=startsw()
	if(1){PC.psolve(tstop)}
	runtime = startsw() - runtime
	sprint(PPRINT_CMD,"All reached tstop: %d ms.\n",tstop)
	{pprint(PPRINT_CMD)}
	{ PC.barrier()	}
	
	if(1){
		par_save_membrane_voltage(JOBDIR,CLUSTER_ID,ID, ISBINARY)
		{pprint("par_save_membrane_voltage() is active.")}
	}
	//par_save_anyvar(JOBDIR,CLUSTER_ID,ID,0)
	if(save_synaptic_locations){
		par_save_synaptic_locations_PCrec(JOBDIR,CLUSTER_ID,ID,0)
		{pprint("par_save_synaptic_locations_PCrec() is active.")}	
	}
	
	if(save_stimulation_locations){
		par_save_stimulation_locations_PCrec(JOBDIR,CLUSTER_ID,ID,0)
		{pprint("par_save_stimulation_locations_PCrec() is active.")}
	}

	if(save_synaptic_delays){
		par_save_synaptic_delays(JOBDIR,CLUSTER_ID,ID,ISBINARY)
		{pprint("par_save_synaptic_delays() is active.")}
	}

	if(save_inmda){
		par_save_inmda(JOBDIR,CLUSTER_ID,ID,ISBINARY)
		{pprint("par_save_inmda() is active.")}
	}

}else{
	//rec_membrane_voltage()
	runtime=startsw()
	run()
	runtime = startsw() - runtime
	printf("Runtime: %10.4g\n", runtime)
	//save_membrane_voltage(JOBDIR,CLUSTER_ID,ID)
}

{sprint(PPRINT_CMD,"Runtime: %10.4g minutes.\n", runtime/60)}
{pprint(PPRINT_CMD)}

if(PARALLEL){
	{ PC.runworker() }
	{ PC.done() }// tell workers to quit
	print "Success"
	quit()
}


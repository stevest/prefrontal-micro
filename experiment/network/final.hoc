//--------------Set parameters and run this for the net (generated from MATBAL scripts)
//--------------Written 1/8/13 Stefanos
if(!load_file("nrngui.hoc")){print "ERROR	Failed to load NEURON!"}			//load main NEURON library
cvode.active(0)	     //Do NOT use CVODE solver!

//----------------------------------------Set parameters--------------------------------------------------------------//
if(!xopen("main_parameters.hoc")){print "ERROR	Failed to load main parameters!"}

//procedure to choose which Pyramidal morphologies we want in network
if(!xopen("chooseMorphologies.hoc")){print "ERROR	Failed to load choose morphologies!"}
//argument: percentage of IB cells morphologies in network, random seed:
chooseMorphologies(60,0)


//Import netrork parameters (Connectivity, synaptic weights etc..) from MATLAB
if(!xopen("importNetworkParameters.hoc")){print "ERROR	Failed to import network parameters!"}
//xopen("importBasal_fAHP.hoc")
//xopen("importBasal_sAHP.hoc")


if(!xopen("../../lib/basic-graphics.hoc")){print "ERROR	Failed to import parameters!"}
if(!xopen("../define_objects.hoc")){print "ERROR	Failed to import parameters!"}
if(!xopen("../RS1cell.hoc") ){print "ERROR	Failed to load L5Pyramidal hoc!"}
if(!xopen("incell.hoc")){print "ERROR	Failed to load interneuron hoc!"}
//{xopen("cb.hoc")} // Xenia's interneurons: load template for CB/LTS interneuron
//{xopen("cr.hoc")} // Xenia's interneurons

if(!xopen("NMDA_Array_1_5.hoc")){print "ERROR	Failed to import NMDA synaptic weights!"}
if(!xopen("AMPA_Array_1_5.hoc")	){print "ERROR	Failed to import AMPA synaptic weights!"}
if(!xopen ("network.hoc")){print "ERROR	Failed to import network structure!"}


//--------------------------------------Graphs
for j=0, (nPCcells-1) {addgraph_2("PCcells[j].soma.v(0.5)", 0,tstop, -70, 50)}
addgraph_2("PVcells[0].soma.v(0.5)", 0,tstop, -70, 50)
//addgraph_2("Pcells[0].axon[0].v(0.5)", 0,tstop, -70, 50)
//addgraph_2("Pcells[0].soma.v(0.5)", 0,tstop, -70, 50)
//addgraph_2("Pcells[2].soma.v(0.5)", 0,tstop, -70, 50)
/*addgraph_2("Pcells[3].soma.v(0.5)", 0,tstop, -70, 50)
addgraph_2("Pcells[4].soma.v(0.5)", 0,tstop, -70, 50)
addgraph_2("Pcells[5].soma.v(0.5)", 0,tstop, -70, 50)
addgraph_2("Pcells[6].soma.v(0.5)", 0,tstop, -70, 50)
addgraph_2("Pcells[7].soma.v(0.5)", 0,tstop, -70, 50)*/
//addgraph_2("Pcells[0].dend[7].v(0.5)", 0,tstop, -70, 50)
//addgraph_2("Pcells[0].soma[0].cai(0.5)", 0,tstop, 0, 0.01)
//addgraph("Pcell[0].soma.ik_kca(0.5)",-70,50)
//addgraph("Pcell[0].soma.ik_Ks(0.5)",-70,50)




//addgraph_2("INcells[0].soma.v(0.5)", 0,tstop, -80, 50)
splot=new Shape()
//forsec Pcells[0].somatic {shape.color(2)}
//forsec Pcells[0].axonal {shape.color(5)}
//forsec Pcells[0].basal {shape.color(3)}
//forsec Pcells[0].apical {shape.color(6)}

//---------------------------------------------Multiple Experiments/Runs---------------------------------------------//
//---For many experiments
strdef syscmd, data_dira, data_dirb, data_dirc, data_dird, running, tmpstr 


strdef temp
objref vsoma1, vsoma2, vsoma3, vsoma4, insoma, insomab, curampa, curnmda, curgabaa, curgabab, DendDist, Params
objref campa[maxsyn], ct[8][inmaxsyn], cnmda[maxsyn], cnmdat[inmaxsyn], cgabaa[maxsyn3], campaa[automaxsyn], cnmdaa[automaxsyn], campain[inmaxsyn], cnmdain[inmaxsyn], cgabaat[maxsyn3], cgabab[maxsyn3], cgababt[maxsyn3], ampac, nmdac, gabaac, gababc	
objref gababweights, nmdaweights, adpweights
//----record total cell population spike activity
objref timevec, idvec, recncs, tobj, nil, total_activity
xopen("values_gabaweight.hoc")
xopen("values_nmda.hoc")
xopen("values_adp.hoc")

			
for adpvalues=0,0 {
	fadp=1.0// (maximum ~7mV (normal gyrw sta 4mV)me train sta 20Hz (5 clamps diarkeias 1ms, ana 50 ms)current clamp)
	sprint(data_dira,"adp%.3f",fadp)
	sprint(syscmd,"mkdir -p %s",data_dira) 	
	system(syscmd)

	for nmdavalues=0,0 { 
		nmdaweight=nmdaweights.get[nmdavalues]
		sprint(data_dirb,"nmda%.2f",nmdaweight)
		sprint(syscmd,"mkdir -p %s/%s", data_dira, data_dirb) 	
		system(syscmd)
		
		for gababvalues=0,0 {
			gabaweightb=1.05e-4*0.3//According to Thomson(1999)

			sprint(data_dirc,"gb%f",gabaweightb)
			sprint(syscmd,"mkdir -p %s/%s/%s",data_dira, data_dirb, data_dirc) 	
			system(syscmd)

			sadp_soma()
			sadp_dend()
			sadp_apical()  //mplokara kai stous apical
			
			//ECA_30()
			//thinner_basal()
			//thinner_apical()

			for runs = 0,100 {//0, TOTALRUNS {
				stimulation(runs)   //0 for not saving PID data, 1 for saving PID data.
				initPC(runs)
				initPV(runs)
				initPC2PV(runs)
				initPV2PC(runs)
				//noise(runs) 
				//PV_NetStim()
				//oneCellclamp()
				//train()
				//xopen("recordandsave/record.hoc")
				//xopen("recordandsave/save_data.hoc")
				//rec_membrane_voltage()

				run()

				printf("DEBUG: Saving runs Params...\n")
				
				//save_distances()
				printf("DEBUG: DONE Saving Distances...\n")
				//save_membrane_voltage()
				printf("DEBUG: DONE Saving Voltages...\n")
				//save_PID()
				printf("DEBUG: DONE Saving PIDs...\n")
				
			}
		}
	}
}

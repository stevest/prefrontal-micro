//Balance each cell compartment to the prefered voltage and comply with NEURON initialization routines.
// calling NEURON's finitialize() with an argument causes ALL compartments created so far to be initialized
//in that voltage! A more subtle approach should be to initialize the compartments during creation
//to the desired voltage and then call finitialize() with no arguments.
//Though,calling AFTER A RUN finitialize again produces weird results. So make sure you update the voltages
//for EACH COMPARTMENT before each run.

proc balance_compartments() {local nodeid
	//Do not call finitialize with v_init argument, because it sets it in all cells
	// created up to this point!
	if(PARALLEL){
		nodeid = PC.id
	}else{
		nodeid=0
	}
	finitialize()
	forsec PCcell_list {
		for (x) {
			if (ismembrane("na_ion")) {e_passive(x)=v(x)+ina(x)/g_passive(x)} 
			if (ismembrane("k_ion")) {e_passive(x)=e_passive(x)+ik(x)/g_passive(x)} 
			if (ismembrane("ca_ion")) {e_passive(x)=e_passive(x)+ica(x)/g_passive(x)}
			if (ismembrane("in_ion")) {e_passive(x)=e_passive(x)+in(x)/g_passive(x)} //ican
			if (ismembrane("h")) {e_passive(x)=e_passive(x)+ihi(x)/g_passive(x)}
//disable ican:
			if (ismembrane("ican")) { gbar_ican(x)= gbar_ican(x)  *fadp }
		
		}
	}
	forsec PVcell_list {
		for (x) {
			if (ismembrane("na_ion")) {e_passive(x)=v(x)+ina(x)/g_passive(x)} 
			if (ismembrane("k_ion")) {e_passive(x)=e_passive(x)+ik(x)/g_passive(x)} 
			if (ismembrane("ca_ion")) {e_passive(x)=e_passive(x)+ica(x)/g_passive(x)}     
			if (ismembrane("h")) {e_passive(x)=e_passive(x)+ihi(x)/g_passive(x)}
		}
	}

	fcurrent()
	// This is straight from NEURONS stdrun.hoc:
	if (cv.active()) {
		{sprint(STDOUT, "NODEID: %g: has CVode ENABLED!", nodeid)}
		pprint(STDOUT)
		cv.re_init()
	}       else {
		{sprint(STDOUT, "NODEID: %g: has CVode DISABLED!", nodeid)}
		pprint(STDOUT)
		fcurrent()
	}
	frecord_init()
}
